S
Program
DeclList
DeclList'
Type
int
id
x
Decl
VarDecl'
;
DeclList
DeclList'
Type
int
id
SS
Decl
VarDecl'
[
num
10
]
;
DeclList
DeclList'
Type
int
id
main
Decl
FunDecl
(
ParamDeclList
epsilon
)
Block
{
VarDeclList
VarDecl
Type
int
id
a
VarDecl'
;
VarDeclList
VarDecl
Type
int
id
b
VarDecl'
;
VarDeclList
VarDecl
Type
double
id
c
VarDecl'
;
VarDeclList
VarDecl
Type
double
id
d
VarDecl'
;
VarDeclList
VarDecl
Type
double
id
e
VarDecl'
[
num
20
]
;
VarDeclList
VarDecl
Type
int
id
f
VarDecl'
[
num
15
]
;
VarDeclList
epsilon
StmtList
Stmt
Expr
id
f
ExprIdTail
[
Expr
num
3
Expr'
epsilon
]
ExprArrayTail
=
Expr
num
2
Expr'
epsilon
;
StmtList'
StmtList
Stmt
Expr
id
a
ExprIdTail
=
Expr
num
3
Expr'
BinOp
-
Expr
num
2
Expr'
BinOp
*
Expr
id
f
ExprIdTail
[
Expr
num
3
Expr'
epsilon
]
ExprArrayTail
Expr'
BinOp
+
Expr
num
1
Expr'
epsilon
;
StmtList'
StmtList
Stmt
if
(
Expr
id
a
ExprIdTail
Expr'
BinOp
||
Expr
id
b
ExprIdTail
Expr'
epsilon
)
Stmt
Block
{
VarDeclList
epsilon
StmtList
Stmt
Expr
id
a
ExprIdTail
=
Expr
num
3
Expr'
BinOp
-
Expr
num
2
Expr'
BinOp
*
Expr
id
b
ExprIdTail
Expr'
BinOp
+
Expr
num
10
Expr'
BinOp
*
Expr
id
a
ExprIdTail
Expr'
epsilon
;
StmtList'
epsilon
}
else
Stmt
Block
{
VarDeclList
epsilon
StmtList
Stmt
Expr
id
d
ExprIdTail
=
Expr
id
x
ExprIdTail
Expr'
BinOp
+
Expr
id
d
ExprIdTail
Expr'
BinOp
+
Expr
num
3.3
Expr'
epsilon
;
StmtList'
epsilon
}
StmtList'
StmtList
Stmt
while
(
Expr
id
a
ExprIdTail
Expr'
BinOp
>
Expr
num
3
Expr'
epsilon
)
Stmt
Block
{
VarDeclList
epsilon
StmtList
Stmt
Expr
id
a
ExprIdTail
=
Expr
id
a
ExprIdTail
Expr'
BinOp
+
Expr
num
1
Expr'
epsilon
;
StmtList'
epsilon
}
StmtList'
StmtList
Stmt
return
Expr
id
a
ExprIdTail
Expr'
epsilon
;
StmtList'
epsilon
}
DeclList
epsilon
$
